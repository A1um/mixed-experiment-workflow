configfile: "config/config.yaml"


include: "rules/common.smk"


rule all:
    input:
        csv="results/coverages.csv",


rule index_reference:
    input:
        config["genome_path"],
    output:
        multiext(config["genome_path"], ".fai", ".bwt", ".pac", ".ann", ".amb", ".sa"),
    log:
        "logs/index_reference/log.txt",
    conda:
        "envs/env.yaml"
    threads: resource_config["index_reference"]["threads"]
    resources:
        mem_mb=resource_config["index_reference"]["mem_mb"],
        runtime=resource_config["index_reference"]["runtime"],
    shell:
        """
        samtools faidx {input} &> {log}
        bwa index {input} &>> {log}
        """


rule mappability:
    input:
        config["genome_path"],
    output:
        bedgraph=temp(
            f"results/mappability/{Path(config['genome_path']).stem}.genmap.bedgraph"
        ),
        sorted_bedgraph="results/mappability/sorted.bg",
        min_bed=f"results/mappability/min_{config['mappability']['score_cutoff']}_map.bed",
        index_dir=directory("results/mappability/index"),
        out_dir=directory("results/mappability"),
    log:
        "logs/mappability/log.txt",
    params:
        k=config["mappability"]["kmer_size"],
        e=config["mappability"]["mismatches"],
        cutoff=config["mappability"]["score_cutoff"],
    conda:
        "envs/env.yaml"
    threads: resource_config["mappability"]["threads"]
    resources:
        mem_mb=resource_config["mappability"]["mem_mb"],
        runtime=resource_config["mappability"]["runtime"],
    shell:
        """
        genmap index -F {input} -I {output.index_dir} &> {log}
        genmap map -K {params.k} -E {params.e} -I {output.index_dir} -O {output.out_dir} \
            -bg -T {threads} -v &>> {log}
        sort -k1,1 -k2,2n {output.bedgraph} > {output.sorted_bedgraph} 2>> {log}
        awk 'BEGIN{{OFS="\\t";FS="\\t"}} {{ if($4>={params.cutoff}) print $1,$2,$3 }}' \
            {output.sorted_bedgraph} > {output.min_bed}
        """


rule fastp:
    input:
        unpack(get_reads),
    output:
        read_1="results/filtered_fastqs/{sample}_R1.fq.gz",
        read_2="results/filtered_fastqs/{sample}_R2.fq.gz",
        summary="results/summary_stats/fastp/{sample}_fastp.txt",
    log:
        "logs/fastp/{sample}.txt",
    conda:
        "envs/env.yaml"
    threads: resource_config["fastp"]["threads"]
    resources:
        mem_mb=resource_config["fastp"]["mem_mb"],
        runtime=resource_config["fastp"]["runtime"],
    shell:
        """
        fastp --in1 {input.read_1} --in2 {input.read_2} \
            --out1 {output.read_1} --out2 {output.read_2} \
            --thread {threads} --detect_adapter_for_pe \
            -j /dev/null -h /dev/null \
            > {output.summary} 2> {log}
        """


rule bwa_mem:
    input:
        rules.index_reference.output,
        ref=config["genome_path"],
        read_1="results/filtered_fastqs/{sample}_R1.fq.gz",
        read_2="results/filtered_fastqs/{sample}_R2.fq.gz",
    output:
        bam="results/bams/raw/{sample}.bam",
        bam_index="results/bams/raw/{sample}.bam.bai",
    log:
        "logs/bwa_mem/{sample}.txt",
    conda:
        "envs/env.yaml"
    threads: resource_config["bwa_mem"]["threads"]
    resources:
        mem_mb=resource_config["bwa_mem"]["mem_mb"],
        runtime=resource_config["bwa_mem"]["runtime"],
    shell:
        """
        bwa mem -M -t {threads} {input.ref} {input.read_1} {input.read_2} 2> {log} | \
        samtools sort -o {output.bam} - &>> {log} \
        && samtools index {output.bam} &>> {log}
        """


rule dedup:
    input:
        bam="results/bams/raw/{sample}.bam",
        bam_index="results/bams/raw/{sample}.bam.bai",
    output:
        bam="results/bams/dedup/{sample}.bam",
        bam_index="results/bams/dedup/{sample}.bam.bai",
    log:
        "logs/dedup/{sample}.txt",
    conda:
        "envs/env.yaml"
    threads: resource_config["dedup"]["threads"]
    resources:
        mem_mb=resource_config["dedup"]["mem_mb"],
        runtime=resource_config["dedup"]["runtime"],
    shell:
        """
        sambamba markdup -p -t {threads} {input.bam} {output.bam} 2> {log} && samtools index {output.bam} &>> {log}
        """


rule filter_bam:
    input:
        bam="results/bams/dedup/{sample}.bam",
        bam_index="results/bams/dedup/{sample}.bam.bai",
    output:
        bam="results/bams/filtered/{sample}.bam",
        bam_index="results/bams/filtered/{sample}.bam.bai",
    log:
        "logs/filter_bam/{sample}.txt",
    params:
        min_mapq=config["filter_bam"]["min_mapq"],
    conda:
        "envs/env.yaml"
    threads: resource_config["filter_bam"]["threads"]
    resources:
        mem_mb=resource_config["filter_bam"]["mem_mb"],
        runtime=resource_config["filter_bam"]["runtime"],
    shell:
        """
        samtools view -h -q{params.min_mapq} {input.bam} 2> {log} | \
        grep -v -e 'XA:Z:' -e 'SA:Z:' 2>> {log} | \
        samtools view -b 2>> {log} > {output.bam} && samtools index {output.bam} 2>> {log}
        """


rule mosdepth:
    input:
        bam="results/bams/filtered/{sample}.bam",
        bam_index="results/bams/filtered/{sample}.bam.bai",
        bed=rules.mappability.output.min_bed,
    output:
        summary="results/depths/{sample}.mosdepth.summary.txt",
    log:
        "logs/mosdepth/{sample}.txt",
    params:
        prefix=lambda wc, output: output[0].replace(".mosdepth.summary.txt", ""),
    conda:
        "envs/env.yaml"
    threads: resource_config["mosdepth"]["threads"]
    resources:
        mem_mb=resource_config["mosdepth"]["mem_mb"],
        runtime=resource_config["mosdepth"]["runtime"],
    shell:
        """
        mosdepth --by {input.bed} -F 1024 {params.prefix} {input.bam}
        """


rule flagstat:
    input:
        bam="results/bams/dedup/{sample}.bam",
        bam_index="results/bams/dedup/{sample}.bam.bai",
    output:
        "results/bams/flagstat/{sample}_algnstats.txt",
    conda:
        "envs/env.yaml"
    shell:
        """
        samtools flagstat -O tsv {input.bam} > {output}
        """


rule create_cov_csv:
    input:
        depths=expand(
            "results/depths/{sample}.mosdepth.summary.txt",
            sample=samples["sample_id"].tolist(),
        ),
        stats=expand(
            "results/bams/flagstat/{sample}_algnstats.txt",
            sample=samples["sample_id"].tolist(),
        ),
    output:
        csv="results/coverages.csv",
    params:
        groups=config["coverage_groups"],
        roles=config["roles"],
    script:
        "scripts/parse_mosdepth.py"
