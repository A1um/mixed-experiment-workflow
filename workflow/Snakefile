configfile: "config/config.yaml"


include: "rules/common.smk"
include: "rules/reference.smk"


rule all:
    input:
        csv=expand("results/csv/coverages_{e}.csv", e=config["mappability"]["e_vals"])

rule create_cov_csv:
    input:
        depths=expand(
            "results/depths/{{e}}/{sample}.mosdepth.summary.txt",
            sample=sampleids,
        ),
        dedup_stats=expand(
            "results/bams/flagstat/{sample}_algnstats.txt",
            sample=sampleids,
        ),
    output:
        csv="results/csv/coverages_{e}.csv",
    params:
        groups=config["coverage_groups"],
        roles=config["roles"],
        sample_sheet=config["sample_sheet"]
    script:
        "scripts/parse_mosdepth.py"

rule merge_reads:
    input:
        unpack(get_reads_to_merge),
    output:
        read_1=temp("results/merged_fastqs/{sample}_R1.fq.gz"),
        read_2=temp("results/merged_fastqs/{sample}_R2.fq.gz"),
    shell:
        """
        cat {input.read_1} > {output.read_1}
        cat {input.read_2} > {output.read_2}
        """


rule fastp:
    input:
        unpack(get_reads),
    output:
        read_1=temp("results/filtered_fastqs/{sample}_R1.fq.gz"),
        read_2=temp("results/filtered_fastqs/{sample}_R2.fq.gz"),
        summary="results/summary_stats/fastp/{sample}_fastp.txt",
    log:
        "logs/fastp/{sample}.txt",
    conda:
        "envs/env.yaml"
    shell:
        """
        fastp --in1 {input.read_1} --in2 {input.read_2} \
            --out1 {output.read_1} --out2 {output.read_2} \
            --thread {threads} --detect_adapter_for_pe \
            -j /dev/null -h /dev/null \
            > {output.summary} 2> {log}
        """


rule bwa_mem:
    input:
        unpack(get_combined_genome),
        read_1="results/filtered_fastqs/{sample}_R1.fq.gz",
        read_2="results/filtered_fastqs/{sample}_R2.fq.gz",
    output:
        bam=temp("results/bams/raw/{sample}.bam"),
        bam_index=temp("results/bams/raw/{sample}.bam.bai"),
    log:
        "logs/bwa_mem/{sample}.txt",
    conda:
        "envs/env.yaml"
    shell:
        """
        bwa mem -M -t {threads} {input.ref} {input.read_1} {input.read_2} 2> {log} | \
        samtools sort -o {output.bam} - &>> {log} \
        && samtools index {output.bam} &>> {log}
        """


rule dedup:
    input:
        bam="results/bams/raw/{sample}.bam",
        bam_index="results/bams/raw/{sample}.bam.bai",
    output:
        bam="results/bams/dedup/{sample}.bam",
        bam_index="results/bams/dedup/{sample}.bam.bai",
    log:
        "logs/dedup/{sample}.txt",
    conda:
        "envs/env.yaml"
    shell:
        """
        sambamba markdup -p -t {threads} {input.bam} {output.bam} 2> {log} && samtools index {output.bam} &>> {log}
        """


rule filter_bam:
    input:
        bam=ancient("results/bams/dedup/{sample}.bam"),
        bam_index=ancient("results/bams/dedup/{sample}.bam.bai"),
    output:
        bam=temp("results/bams/filtered/{sample}.bam"),
        bam_index=temp("results/bams/filtered/{sample}.bam.bai"),
    log:
        "logs/filter_bam/{sample}.txt",
    params:
        min_mapq=config["filter_bam"]["min_mapq"],
    conda:
        "envs/env.yaml"
    shell:
        """
        samtools view -h -q{params.min_mapq} {input.bam} 2> {log} | \
        grep -v -e 'XA:Z:' -e 'SA:Z:' 2>> {log} | \
        samtools view -b 2>> {log} > {output.bam} && samtools index {output.bam} 2>> {log}
        """


rule mosdepth:
    input:
        bam="results/bams/filtered/{sample}.bam",
        bam_index="results/bams/filtered/{sample}.bam.bai",
        bed=get_mappability_bed
    output:
        summary="results/depths/{e}/{sample}.mosdepth.summary.txt",
    shadow: "minimal"
    log:
        "logs/mosdepth/{e}/{sample}.txt",
    params:
        prefix=lambda wc, output: output[0].replace(".mosdepth.summary.txt", ""),
    conda:
        "envs/env.yaml"
    shell:
        """
        mosdepth --by {input.bed} -F 1024 -n {params.prefix} {input.bam}
        """


rule flagstat:
    input:
        bam="results/bams/dedup/{sample}.bam",
        bam_index="results/bams/dedup/{sample}.bam.bai",
    output:
        "results/bams/flagstat/{sample}_algnstats.txt",
    conda:
        "envs/env.yaml"
    shell:
        """
        samtools flagstat -O tsv {input.bam} > {output}
        """



